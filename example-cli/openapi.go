// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/pmamico/openapi-cli-generator

package main

import (
	"fmt"

	"github.com/pmamico/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)

var openapiSubcommand bool

func openapiServers() []map[string]string {
	return []map[string]string{

		map[string]string{
			"description": "Test API server.",
			"url":         "http://localhost:8005",
		},
	}
}

// OpenapiEcho echo
func OpenapiEcho(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "echo"
	if openapiSubcommand {
		handlerPath = "openapi " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = openapiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/echo"

	req := cli.Client.Post().URL(url)

	paramEchoQuery := params.GetString("echo-query")
	if paramEchoQuery != "" {
		req = req.AddQuery("q", fmt.Sprintf("%v", paramEchoQuery))
	}
	paramXRequestId := params.GetString("x-request-id")
	if paramXRequestId != "" {
		req = req.AddHeader("x-request-id", fmt.Sprintf("%v", paramXRequestId))
	}

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

func openapiRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use:   "openapi",
			Short: "Example API",
			Long:  cli.Markdown(""),
		}
		openapiSubcommand = true
	} else {
		cli.Root.Short = "Example API"
		cli.Root.Long = cli.Markdown("")
	}

	func() {
		params := viper.New()

		var examples string

		examples += "  " + cli.Root.CommandPath() + " echo hello: world\n"

		cmd := &cobra.Command{
			Use:     "echo",
			Short:   "echo",
			Long:    cli.Markdown("Echo back body with the same content type."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := OpenapiEcho(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().String("echo-query", "", "")
		cmd.Flags().String("x-request-id", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

}
